//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

namespace Machine.Specifications.Mvc.Specs
{
    using System;
    using System.Web.Mvc;

    [Subject(typeof(ViewResultExtensions))]
    public class when_a_view_result_with_a_specified_view_name_is_asked_if_it_uses_the_default_view 
    {
        static Exception exception;

        Because of = () => exception = Catch.Exception(()=> new ViewResult() { ViewName = "NonDefault" }.ShouldUseDefaultView());

        It should_throw_an_exception = () => exception.ShouldBeOfType<SpecificationException>();
    }

    [Subject(typeof(ViewResultExtensions))]
    public class when_a_view_result_with_no_specified_view_name_is_asked_if_it_uses_the_default_view
    {
        static Exception exception;

        Because of = () => exception = Catch.Exception(() => new ViewResult().ShouldUseDefaultView());

        It should_not_throw_an_exception = () => exception.ShouldBeNull();
    }

    [Subject(typeof(ViewResultExtensions))]
    public class when_a_view_result_is_asked_to_return_the_model_as_a_specified_type_and_the_model_is_that_type
    {
        static Exception exception;
        static object result;
        static ViewResult viewResult;

        Establish context = () =>
            {
                viewResult = new ViewResult { ViewData = { Model = "Model is a string" } };
            };

        Because of = () => exception = Catch.Exception(() => result = viewResult.ShouldHaveModelOfType<string>());

        It should_not_throw_an_exception = () => exception.ShouldBeNull();

        It should_should_allow_the_chaining_of_model_type_assertions = () => result.ShouldBeOfType<ModelTypeAnd<string>>();
    }

}   